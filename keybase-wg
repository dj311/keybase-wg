#!/usr/bin/env python

header = """

        __              __
       / /_____  __  __/ /_  ____ _________       _      ______ _
      / //_/ _ \/ / / / __ \/ __ `/ ___/ _ \ ___ | | /| / / __ `/
     / ,< /  __/ /_/ / /_/ / /_/ (__  /  __/.___`| |/ |/ / /_/ /
    /_/|_|\___/\__, /_.___/\__,_/____/\___/      |__/|__/\__, /
              /____/                                    /____/

"""

description = """
Quickly setup virtual private networks for Keybase teams with Wireguard.
"""

dev_docs = """
TODO:
  - Sanitize inputs by parsing them as the things they should
    be. Double check places where we stick stuff in the command line.
  - Double check that the team name given is valid.
  - Where possible, double check that say peer with device_id=x is
    actually in our team. Which leads to....
  - Figure out a way to invalid devices which have been revoked.
    - I think the way to do this is to check which key was used to
      sign each value in the keystore. Was it the current team key? Or
      was it the old one? If it was an old one, reject it.
    - This might be an alternative method:
      $ echo '{"method": "getdeviceinfo", "params": {"options": {"username": "?"}}}' \
        | keybase chat api -p
      {"result": {
          "devices": [
              {
                  "id": "<device_id>",
                  "description": "<device_name>",
                  "type": "<type>",
                  "ctime": <creation_time>
              }
          ]
    }}
  - Use UDP ports properly.
  - Sort out hole-punching.
  - Use second public IP address API and compare results.


Internal Network Structure:

We use the local network section of the IPv6 address space (fc00::/7). The specification
requires the next 40-bits to be a randomly generated. We don't quite do this, but it's
close. We take the first 40-bits of the hashed team name. The rest uniquely represents
the (user, device) pair. Splitting the team should allow for simpler routing between
interfaces on clients.

In summary:
  [0-8]  0xfd
  [8-48] sha256(team_name + "keybase-wg")[0:40]
  [48-88] sha256(user_name)[0:40]
  [88-128] sha256(device_name)[0:84]

This means the internal network layout is directly determined from the current team
membership. Adding or removing new members doesn't have any affect on existing IPs.

In the future, I want to make use of this to have nice hostnames like
"<device>.<user>.<team>.keybase.local". With the design above, this can be done via a
little stateless DNS server that runs on each users machine.

This is easy to achieve if Avahi is already setup and running. Then run:
  $ avahi-publish-address \
      <device_name>.<user_name>.<team_name>.local \
      <generate_device_ip(team_name, user_name, device_name)>

"""

__doc__ = header + description + dev_docs


import argparse
import asyncio
import hashlib
import ipaddress
import json
import pykeybasebot
import stun
import requests
import shlex
import subprocess
import time


KEEP_ALIVE = 25


WG_KEY_WHITELIST = None
KID_WHITELIST = None
TEAM_WHITELIST = None
USER_WHITELIST = None
INTERFACE_WHITELIST = (
    "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_=+.-"
)
CIDR_WHITELIST = "0123456789abcdefABCDEF.:/"
PORT_WHITELIST = "0123456789"


def clean_string(chars, whitelist):
    if whitelist is None:
        return chars
    else:
        return "".join([char for char in chars if char in whitelist])


def sha256(x):
    return hashlib.sha256(bytes(x, encoding="utf-8")).digest()


def generate_team_subnet(team_name):
    local_network_prefix = bytes.fromhex("fd")
    # avoid collisions with unrelated applications that have hashed this team name as a
    # subnet by concating "keybase-wg" to input
    team_subnet = sha256(team_name + "keybase-wg")[0:5]
    return local_network_prefix + team_subnet


def generate_user_subnet(team_name, user_name):
    team_subnet = generate_team_subnet(team_name)
    user_subnet = sha256(user_name)[0:5]
    return team_subnet + user_subnet


def generate_device_ip(team_name, user_name, device_name):
    user_subnet = generate_user_subnet(team_name, user_name)
    device_subnet = sha256(device_name)[0:5]
    return user_subnet + device_subnet


def make_ipv6_cidr(ip_bytes):
    len_bytes = len(ip_bytes)

    if len_bytes < 16:  # subnet
        padded_subnet = ip_bytes + bytes((16 - len_bytes) * [0])
        prefix_length = len_bytes * 8
        return str(ipaddress.IPv6Network((padded_subnet, prefix_length)))

    else:  # full_address
        return str(ipaddress.IPv6Address(ip_bytes))


def get_team_members(team_name):
    command = {
        "method": "list-team-memberships",
        "params": {"options": {"team": team_name}},
    }
    command = json.dumps(command)
    response = run("Fetching team info", ["keybase", "team", "api"], stdin=command,)
    response = json.loads(response)

    members = (
        response["result"]["members"]["owners"]
        + response["result"]["members"]["admins"]
        + response["result"]["members"]["writers"]
        + response["result"]["members"]["readers"]
    )

    members = [
        {"name": member["username"], "id": member["uv"]["uid"],} for member in members
    ]

    return members


def get_device_info():
    response = run("Getting device info", ["keybase", "status", "--json"],)
    response = json.loads(response)
    return {
        "user": response["Username"],
        "user_id": response["UserID"],
        "device": response["Device"]["name"],
        "device_id": response["Device"]["deviceID"],
    }


def generate_config(private_key, internal_ip, external_port, peers):
    config = (
        f"[Interface]\n"
        f"PrivateKey = {private_key}\n"
        f"Address = {internal_ip}\n"
        f"ListenPort = {external_port}\n"
        f"\n"
    )

    for peer_key, peer in peers.items():
        config += (
            f"[Peer]\n"
            f"PublicKey = {peer['public_key']}\n"
            f"AllowedIPs = {peer['internal_ip']}\n"
            f"Endpoint = {peer['external_ip']}:{peer['external_port']}\n"
            f"PersistentKeepalive = {KEEP_ALIVE}\n"
            f"\n"
        )

    return config


def generate_keypair():
    private_key = run("Generating private key", ["wg", "genkey"]).strip()
    public_key = run("Deriving public key", ["wg", "pubkey"], stdin=private_key).strip()
    return private_key, public_key


def parse_peer_state(json_string):
    try:
        peer = json.loads(json_string)
        peer = {
            "device_id": clean_string(peer["device_id"], KID_WHITELIST),
            "public_key": clean_string(peer["public_key"], WG_KEY_WHITELIST),
            "internal_ip": clean_string(peer["internal_ip"], CIDR_WHITELIST),
            "external_ip": clean_string(peer["external_ip"], CIDR_WHITELIST),
            "external_port": clean_string(peer["external_port"], PORT_WHITELIST),
        }
        return peer
    except:
        return None


def fetch_network_state(bot):
    keys = asyncio.run(bot.kvstore.list_entrykeys("keybase-wg", team=args.team))

    keys = keys.entry_keys
    keys = [key.entry_key for key in keys]
    keys = set(keys)

    config_keys = {key for key in keys if key.endswith("-config")}

    peers = {
        key: asyncio.run(bot.kvstore.get("keybase-wg", key, args.team)).entry_value
        for key in config_keys
    }
    peers = {key: parse_peer_state(peer_state) for key, peer_state in peers.items()}
    peers = {key: peer for key, peer in peers.items() if peer is not None}

    return peers


def generate_interface_name(team):
    team = clean_string(team, INTERFACE_WHITELIST)
    return f"kb-{team}"[0:15]


def generate_hostname(team, user, device):
    # nss-mdns disables .local domains with more than one "part" by
    # default (so `a.local` is allowed, but `a.b.local` is not).

    # Addresses like device.user.team.local are nicest, but it's not
    # worth forcing people to change their configuration.

    # To avoid forcing people to change their configuration, this
    # address scheme shouldn't use multiple address parts.
    # Use dashes since they are disallowed in usernames.
    return f"{device}-{user}-{team}.local"


def run(desc, command, stdin=None, bg=False):
    command_preview = " ".join([shlex.quote(part) for part in command])

    print(f"\n{desc}:")
    print(f"  $ {command_preview}")

    if bg == False:
        result = subprocess.run(
            command, input=stdin, stdout=subprocess.PIPE, check=True, encoding="utf-8",
        ).stdout
        return result

    elif bg == True:
        process = subprocess.Popen(
            command, stdin=subprocess.PIPE, stdout=subprocess.PIPE, encoding="utf-8",
        )
        if stdin:
            process.stdin.write(stdin)
        return process


if __name__ == "__main__":
    print(header)

    parser = argparse.ArgumentParser(description=description)
    parser.add_argument("--team", help="name of team to connect with", required=True)

    args = parser.parse_args()

    # Clean the team name
    team = clean_string(args.team, TEAM_WHITELIST)

    # The "bot" is our interface to keybase
    def event_handler(*args, **kwargs):
        pass

    bot = pykeybasebot.Bot(handler=event_handler)

    print("\n► Fetching/generating device information.")
    me = get_device_info()

    private_key, public_key = generate_keypair()
    print("\nprivate key \t", private_key)
    print("public key \t", public_key)

    # Figure out my public ip
    nat_type, external_ip, external_port = stun.get_ip_info()
    external_ip = clean_string(external_ip, CIDR_WHITELIST)
    external_port = clean_string(str(external_port), PORT_WHITELIST)

    print("external port \t", external_port)
    print("external ip \t", external_ip)

    # Generate my internal ip
    internal_ip = make_ipv6_cidr(
        generate_device_ip(args.team, me["user"], me["device"])
    )
    print("internal ip \t", internal_ip)

    # Publish my details for others
    print("\n► Publishing my device information to team.")
    asyncio.run(
        bot.kvstore.put(
            "keybase-wg",
            me["device_id"] + "-config",
            json.dumps(
                {
                    "device_id": me["device_id"],
                    "public_key": public_key,
                    "internal_ip": internal_ip,
                    "external_ip": external_ip,
                    "external_port": external_port,
                }
            ),
            team=args.team,
        )
    )

    print("\n► Fetching team information.")
    peers = fetch_network_state(bot)

    # Remove ourselves from the peer list
    peers = {
        key: peer for key, peer in peers.items() if peer["device_id"] != me["device_id"]
    }

    print("\n► Configuring your device.")
    interface = generate_interface_name(args.team)
    config_str = generate_config(private_key, internal_ip, external_port, peers)

    interface_conf_path = "./" + interface + ".conf"
    with open(interface_conf_path, "w") as f:
        f.writelines(config_str)

    run("Join the network", ["wg-quick", "up", interface_conf_path])

    # Setup nice hostnames with avahi/mdns.
    internal_name = generate_hostname(args.team, me["user"], me["device"])

    print("Giving device a name on the team network")
    try:
        run("Checking if avahi is available", ["which", "avahi-publish-address"])

    except subprocess.CalledProcessError:
        print(f"\nCouldn't setup local name {internal_name},\n")
        print(f"since avahi-publish-address isn't available.\n")
        dns_registration_process = None

    else:
        dns_registration_process = run(
            "Using avahi to setup local domain name",
            ["avahi-publish-address", internal_name, internal_ip],
            bg=True,
        )

    print(
        f"\n► Setup complete ✓ \n\n"
        f"You are now connected to the {team} network. Team members \n"
        f"can access your machine via {internal_ip}\n"
        f"or {internal_name} (when mdns is enabled)."
    )

    listening_msg = "\n► Listening for changes in network config..."
    print(listening_msg)
    time.sleep(10)

    try:
        while True:
            new_peers = fetch_network_state(bot)
            new_peers = {
                key: peer
                for key, peer in new_peers.items()
                if peer["device_id"] != me["device_id"]
            }

            peers_changed = [
                peers.get(key) != new_peers.get(key) for key in new_peers.keys()
            ]
            peer_added = any([key not in peers for key in new_peers])
            peer_removed = any([key not in new_peers for key in peers])

            if peer_added or peer_removed or any(peers_changed):
                print("Change detected: syncing configuration with team.")
                peers = new_peers

                run("Taking interface down", ["wg-quick", "down", interface_conf_path])

                config_str = generate_config(
                    private_key, internal_ip, external_port, peers
                )
                with open(interface_conf_path, "w") as f:
                    f.writelines(config_str)

                run("Putting interface up", ["wg-quick", "up", interface_conf_path])

                print(listening_msg)
                time.sleep(10)

    except (KeyboardInterrupt, SystemExit):
        print("► Disconnecting from network.")

        run("Taking interface down", ["wg-quick", "down", interface_conf_path])
        run("Deleting wireguard config", ["rm", interface_conf_path])

        print("Removing peer details.\n")
        asyncio.run(
            bot.kvstore.delete(
                "keybase-wg", me["device_id"] + "-config", team=args.team,
            )
        )

        if dns_registration_process is not None:
            print("Deregistering local domain name.\n")
            dns_registration_process.terminate()

        print("Bye!")
        quit()
